# # custom-values.yaml
# # This file should be placed in the same directory as your osdu-helm.tf file

# global:
#   # Using nip.io with your AWS LoadBalancer hostname (dots converted to dashes)
#   domain: "a894199a15e2a4daa818341e617617b2-586949492.us-east-1.elb.amazonaws.com"

#   # HTTP mode (not HTTPS)
#   useHttps: false

# keycloak:
#   auth:
#     # Keycloak admin password (min 8 chars, alphanumeric only)
#     adminPassword: "KeycloakAdmin123"
  
#   # HTTP mode setting
#   proxy: none

# minio:
#   auth:
#     # MinIO root password (min 8 chars, alphanumeric only)
#     rootPassword: "MinioRoot123"
#   persistence:
#     size: 40Gi
#   # Uncomment the line below if you face connectivity issues
#   #useInternalServerUrl: true

# postgresql:
#   global:
#     postgresql:
#       auth:
#         # PostgreSQL password (min 8 chars, alphanumeric only)
#         postgresPassword: "PostgresDB123"
#   primary:
#     persistence:
#       size: 8Gi
#     resourcesPreset: "medium"

# airflow:
#   externalDatabase:
#     # Airflow database password (min 8 chars, alphanumeric only)
#     password: "AirflowDB123"
#   auth:
#     # Airflow admin password (min 8 chars, alphanumeric only)
#     password: "AirflowAdmin123"

# elasticsearch:
#   security:
#     # Elasticsearch password (min 8 chars, alphanumeric only)
#     elasticPassword: "ElasticSearch123"
#   master:
#     persistence:
#       size: 8Gi
#   data:
#     persistence:
#       size: 8Gi

# rabbitmq:
#   auth:
#     # RabbitMQ password (min 8 chars, alphanumeric only)
#     password: "RabbitMQ123"




# OSDU Baremetal Values - Selective Tainting Strategy
# File: selective-taint-values.yaml

# ========================================================================
# INFRASTRUCTURE SERVICES (Backend Nodes - Tainted)
# Only PostgreSQL, Elasticsearch, MinIO, RabbitMQ with tolerations
# ========================================================================

# PostgreSQL Configuration (Backend Nodes)
postgresql:
  enabled: true
  fullnameOverride: "postgresql-db"
  global:
    postgresql:
      auth:
        postgresPassword: "admin123"
        database: "postgres"
  primary:
    persistence:
      enabled: true
      size: "20Gi"
      storageClass: "gp2"
    resourcesPreset: "medium"
    nodeSelector:
      "node-role": "osdu-backend"
    tolerations:
      - key: "node-role"
        operator: "Equal"
        value: "osdu-backend"
        effect: "NoSchedule"
  nodeSelector:
    "node-role": "osdu-backend"
  tolerations:
    - key: "node-role"
      operator: "Equal"
      value: "osdu-backend"
      effect: "NoSchedule"

# Elasticsearch Configuration (Backend Nodes)
elasticsearch:
  enabled: true
  fullnameOverride: "elasticsearch"
  security:
    enabled: true
    elasticPassword: "admin123"
    tls:
      autoGenerated: true
  master:
    fullnameOverride: "elasticsearch"
    masterOnly: false
    heapSize: "1024m"
    replicas: "1"
    persistence:
      size: "10Gi"
      storageClass: "gp2"
    nodeSelector:
      "node-role": "osdu-backend"
    tolerations:
      - key: "node-role"
        operator: "Equal"
        value: "osdu-backend"
        effect: "NoSchedule"
  coordinating:
    replicas: "0"
  data:
    replicas: "1"
    persistence:
      size: "30Gi"
      storageClass: "gp2"
    nodeSelector:
      "node-role": "osdu-backend"
    tolerations:
      - key: "node-role"
        operator: "Equal"
        value: "osdu-backend"
        effect: "NoSchedule"
  ingest:
    replicas: "0"
  nodeSelector:
    "node-role": "osdu-backend"
  tolerations:
    - key: "node-role"
      operator: "Equal"
      value: "osdu-backend"
      effect: "NoSchedule"

# MinIO Configuration (Backend Nodes)
minio:
  mode: "standalone"
  enabled: true
  fullnameOverride: "minio"
  statefulset:
    replicaCount: 1
    drivesPerNode: 4
  auth:
    rootUser: "minio"
    rootPassword: "admin123"
  persistence:
    enabled: true
    size: "20Gi"
    storageClass: "gp2"
    mountPath: "/bitnami/minio/data"
  extraEnvVarsCM: "minio-config"
  useInternalServerUrl: false
  nodeSelector:
    "node-role": "osdu-backend"
  tolerations:
    - key: "node-role"
      operator: "Equal"
      value: "osdu-backend"
      effect: "NoSchedule"

# RabbitMQ Configuration (Backend Nodes)
rabbitmq:
  enabled: true
  fullnameOverride: "rabbitmq"
  auth:
    username: "rabbitmq"
    password: "admin123"
  replicaCount: 1
  loadDefinition:
    enabled: true
    existingSecret: "load-definition"
  logs: "-"
  configuration: |
    ## Username and password
    ##
    default_user = rabbitmq
    ## Clustering
    cluster_name = rabbitmq
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default
    cluster_formation.k8s.address_type = hostname
    cluster_formation.k8s.service_name = rabbitmq-headless
    cluster_formation.k8s.hostname_suffix = .rabbitmq-headless.default.svc.cluster.local      
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    load_definitions = /app/load_definition.json
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    # log level setup
    log.connection.level = error
    log.default.level = error
  nodeSelector:
    "node-role": "osdu-backend"
  tolerations:
    - key: "node-role"
      operator: "Equal"
      value: "osdu-backend"
      effect: "NoSchedule"

# ========================================================================
# KEYCLOAK (Istio Nodes - Tainted)
# ========================================================================

# Keycloak Configuration (Istio Nodes)
keycloak:
  enabled: true
  fullnameOverride: "keycloak"
  auth:
    adminPassword: "admin123"
  service:
    type: "ClusterIP"
  postgresql:
    enabled: false
  externalDatabase:
    existingSecret: "keycloak-database-secret"
    existingSecretPasswordKey: "KEYCLOAK_DATABASE_PASSWORD"
    existingSecretHostKey: "KEYCLOAK_DATABASE_HOST"
    existingSecretPortKey: "KEYCLOAK_DATABASE_PORT"
    existingSecretUserKey: "KEYCLOAK_DATABASE_USER"
    existingSecretDatabaseKey: "KEYCLOAK_DATABASE_NAME"
  proxy: "none"
  nodeSelector:
    "node-role": "osdu-istio-keycloak"
  tolerations:
    - key: "node-role"
      operator: "Equal"
      value: "osdu-istio-keycloak"
      effect: "NoSchedule"

# ========================================================================
# ALL OTHER SERVICES (Frontend Nodes - No Taints, No nodeSelector needed)
# These will automatically schedule on frontend nodes since they're untainted
# ========================================================================

# Airflow Configuration (Frontend Nodes - Default)
airflow:
  enabled: true
  fullnameOverride: "airflow"
  postgresql:
    enabled: false
  externalDatabase:
    host: "postgresql-db"
    user: "airflow_owner"
    password: "admin123"
    database: "airflow"
  rbac:
    create: true
  serviceaccount:
    create: true
  ingress:
    enabled: false
  auth:
    username: "admin"
    password: "admin123"
  dags:
    existingConfigmap: "dags-config"
  worker:
    extraEnvVarsCM: "airflow-config"
    extraEnvVarsSecret: "airflow-secret"
    podAnnotations:
      "sidecar.istio.io/inject": "false"
    automountServiceAccountToken: true
    # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes
  web:
    extraEnvVarsCM: "airflow-config"
    extraEnvVarsSecret: "airflow-secret"
    resources:
      requests:
        cpu: "500m"
        memory: "1024Mi"
      limits:
        cpu: "750m"
        memory: "1536Mi"
    # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes
  scheduler:
    extraEnvVarsCM: "airflow-config"
    extraEnvVarsSecret: "airflow-secret"
    resources:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "750m"
        memory: "1024Mi"
    # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

# Istio Configuration
istio:
  gateway: "osdu-ir-istio-gateway"

# Global Configuration (Frontend by default)
global:
  dataPartitionId: "osdu"
  domain: "a4968ecb1de5343718f1c89a5e26301d-277214911.us-east-1.elb.amazonaws.com"
  onPremEnabled: true
  useHttps: false
  limitsEnabled: true
  logLevel: "ERROR"
  # ✅ NO nodeSelector - will use frontend nodes by default

# Domain Configuration
domain:
  tls:
    osduCredentialName: "osdu-ingress-tls"
    minioCredentialName: "minio-ingress-tls"
    s3CredentialName: "s3-ingress-tls"
    keycloakCredentialName: "keycloak-ingress-tls"
    airflowCredentialName: "airflow-ingress-tls"

# Configuration
conf:
  createSecrets: true
  nameSuffix: ""

# Bootstrap Configuration (Frontend by default)
bootstrap:
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes
  airflow:
    dagImages:
      csv_parser: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/csv-parser/csv-parser/gc-csv-parser:v0.27.0"
      segy_to_zgy: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/segy-to-zgy-conversion/gc-segy-to-zgy:v0.27.2"
      open_vds: "community.opengroup.org:5555/osdu/platform/domain-data-mgmt-services/seismic/open-vds/openvds-ingestion:3.4.5"
      energistics: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/energistics/witsml-parser/gc-baremetal-energistics:v0.27.0"
    username: "admin"
    password: "admin123"
  
  postgres:
    external: false
    cloudSqlConnection: ""
    keycloak:
      host: "postgresql-db"
      port: "5432"
      name: "keycloak"
      user: "keycloak_owner"
      password: "admin123"
    dataset:
      host: "postgresql-db"
      port: "5432"
      name: "dataset"
      user: "dataset"
      password: "admin123"
    entitlements:
      host: "postgresql-db"
      port: "5432"
      name: "entitlements"
      user: "entitlements"
      password: "admin123"
      schema: "entitlements_osdu_1"
    file:
      host: "postgresql-db"
      port: "5432"
      name: "file"
      user: "file_owner"
      password: "admin123"
    legal:
      host: "postgresql-db"
      port: "5432"
      name: "legal"
      user: "legal_owner"
      password: "admin123"
    partition:
      host: "postgresql-db"
      port: "5432"
      name: "partition"
      user: "partition"
      password: "admin123"
    register:
      host: "postgresql-db"
      port: "5432"
      name: "register"
      user: "register_owner"
      password: "admin123"
    schema:
      host: "postgresql-db"
      port: "5432"
      name: "schema"
      user: "schema"
      password: "admin123"
    seismic:
      host: "postgresql-db"
      port: "5432"
      name: "seismic"
      user: "seismic"
      password: "admin123"
    storage:
      host: "postgresql-db"
      port: "5432"
      name: "storage"
      user: "storage_owner"
      password: "admin123"
    well_delivery:
      host: "postgresql-db"
      port: "5432"
      name: "well-delivery"
      user: "well_delivery_owner"
      password: "admin123"
    wellbore:
      host: "postgresql-db"
      port: "5432"
      name: "wellbore"
      user: "wellbore"
      password: "admin123"
    workflow:
      host: "postgresql-db"
      port: "5432"
      name: "workflow"
      user: "workflow"
      password: "admin123"
      system_namespace: "osdu"
    secret:
      postgresqlUser: "postgres"
      postgresqlPort: "5432"
  
  elastic:
    secret:
      elasticHost: "elasticsearch"
      elasticPort: "9200"
      elasticAdmin: "elastic"
      elasticSearchUser: "search-service"
      elasticIndexerUser: "indexer-service"
    imagePullSecrets: []
  
  minio:
    external: false
    console_url: ""
    api_url: ""
    policy:
      user: "admin"
      password: "admin123"
    airflow:
      user: "admin"
      password: "admin123"
    file:
      user: "admin"
      password: "admin123"
    legal:
      user: "admin"
      password: "admin123"
    storage:
      user: "admin"
      password: "admin123"
    seismicStore:
      user: "admin"
      password: "admin123"
      bucket: ""
    schema:
      user: "admin"
      password: "admin123"
    wellbore:
      user: "admin"
      password: "admin123"
    dag:
      user: "admin"
      password: "admin123"
  
  keycloak:
    secret:
      keycloakService: "http://keycloak"
      keycloakRealmName: "osdu"

# Infrastructure Bootstrap (Frontend by default)
gc_baremetal_infra_bootstrap:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

rabbitmq_bootstrap:
  enabled: true
  data:
    rabbitmqHost: "rabbitmq"
    rabbitmqVhost: "/"
    bootstrapServiceAccountName: "bootstrap-sa"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

# Google Cloud Platform Bootstrap (Disabled for Baremetal)
gc_infra_bootstrap:
  enabled: false
  data:
    projectId: ""
    serviceAccountName: "infra-bootstrap"
  airflow:
    bucket: ""
    environmentName: ""
    location: ""
    dagImages:
      csv_parser: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/csv-parser/csv-parser/gc-csv-parser:v0.27.0"
      segy_to_zgy: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/segy-to-zgy-conversion/gc-segy-to-zgy:v0.27.2"
      open_vds: "community.opengroup.org:5555/osdu/platform/domain-data-mgmt-services/seismic/open-vds/openvds-ingestion:3.4.5"
      energistics: "community.opengroup.org:5555/osdu/platform/data-flow/ingestion/energistics/witsml-parser/gc-energistics:v0.27.0"

# ========================================================================
# ALL OSDU MICROSERVICES (Frontend Nodes - Default Scheduling)
# No nodeSelector/tolerations needed - they'll go to untainted frontend nodes
# ========================================================================

gc_entitlements_deploy:
  enabled: true
  data:
    bootstrapServiceAccountName: "bootstrap-sa"
    adminUserEmail: "osdu-admin@service.local"
    airflowComposerEmail: "airflow@service.local"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_config_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc-crs-catalog-deploy:
  enabled: true
  data:
    serviceAccountName: "crs-catalog"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_dataset_deploy:
  enabled: true
  data:
    serviceAccountName: "dataset"
  conf:
    postgresSecretName: "dataset-postgres-secret"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc-crs-conversion-deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_partition_deploy:
  enabled: true
  data:
    policyServiceEnabled: "true"
    edsEnabled: "false"
    autocompleteEnabled: "false"
    minioExternalEndpoint: ""
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_policy_deploy:
  enabled: true
  data:
    bucketName: "refi-opa-policies"
    bootstrapServiceAccountName: "bootstrap-sa"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_storage_deploy:
  enabled: true
  data:
    bootstrapServiceAccountName: "bootstrap-sa"
    opaEnabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_unit_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_register_deploy:
  enabled: true
  data:
    serviceAccountName: "register"
  conf:
    rabbitmqSecretName: "rabbitmq-secret"
    registerPostgresSecretName: "register-postgres-secret"
    registerKeycloakSecretName: "register-keycloak-secret"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_notification_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_well_delivery_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_workflow_deploy:
  enabled: true
  data:
    sharedTenantName: "osdu"
    bootstrapServiceAccountName: "bootstrap-sa"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_file_deploy:
  enabled: true
  data:
    serviceAccountName: "file"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_schema_deploy:
  enabled: true
  data:
    bootstrapServiceAccountName: "bootstrap-sa"
  conf:
    bootstrapSecretName: "datafier-secret"
    minioSecretName: "schema-minio-secret"
    postgresSecretName: "schema-postgres-secret"
    rabbitmqSecretName: "rabbitmq-secret"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_search_deploy:
  enabled: true
  data:
    servicePolicyEnabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_seismic_store_sdms_deploy:
  enabled: true
  data:
    redisDdmsHost: "redis-ddms"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_indexer_deploy:
  enabled: true
  conf:
    elasticSecretName: "indexer-elastic-secret"
    keycloakSecretName: "indexer-keycloak-secret"
    rabbitmqSecretName: "rabbitmq-secret"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_legal_deploy:
  enabled: false

core_legal_deploy:
  enabled: true
  data:
    image: "community.opengroup.org:5555/osdu/platform/security-and-compliance/legal/core-plus-legal-master:latest"
    imagePullPolicy: "IfNotPresent"
    cronJobServiceAccountName: "bootstrap-sa"
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_wellbore_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_wellbore_worker_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_secret_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_eds_dms_deploy:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

gc_oetp_client_deploy:
  enabled: false

gc_oetp_server_deploy:
  enabled: false

dfaas_tests:
  enabled: false

# ========================================================================
# OPTIONAL: If you want to ensure some services prefer frontend nodes
# (though it's not necessary since frontend nodes are untainted)
# ========================================================================

# OPA Service (Frontend by default)
opa:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

# Redis Services (Frontend by default - lightweight caching)
redis-dataset:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-entitlements:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-indexer:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-notification:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-search:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-seismic-store:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

redis-storage:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes

osdu-ir-install-redis-master:
  enabled: true
  # ✅ NO nodeSelector/tolerations - will schedule on frontend (untainted) nodes